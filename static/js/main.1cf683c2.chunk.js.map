{"version":3,"sources":["components/board/Board.module.css","components/end-game-panel/EndGamePanel.module.css","pages/game/Game.module.css","redux/actions/action-types.js","constants.js","redux/reducers/game.js","redux/reducers/tiles.js","redux/reducers/score.js","redux/reducers/index.js","redux/actions/tiles.js","redux/actions/game.js","redux/actions/score.js","utils/grid.js","redux/sagas.js","redux/store.js","components/header/Header.js","components/header/index.js","components/board/Board.js","components/board/index.js","components/end-game-panel/EndGamePanel.js","components/end-game-panel/index.js","pages/game/Game.js","pages/game/index.js","index.js","components/header/Header.module.css"],"names":["module","exports","NEW_GAME","CHECK_END_GAME","UPDATE_BEST_SCORE","GET_BEST_SCORE","NEW_TILE","MOVE_TILES","MERGE_TILES","GAME_STATES","IN_PROGRESS","VICTORY","GAME_OVER","IN_PROGRESS_AFTER_VICTORY","GRID_SIZE","DIRECTIONS","UP","LEFT","DOWN","RIGHT","ARROWS","38","37","40","39","initialState","gameState","gameReducer","state","action","type","actions","grid","tilesMoving","tilesReducer","payload","currentScore","bestScore","scoreReducer","newScore","combineReducers","game","tiles","score","newTile","moveTiles","direction","mergeTiles","updateGrid","setTilesMoving","value","newGame","gameOver","victory","keepPlaying","checkEndGame","incrementScore","updateBestScore","getBestScore","VECTOR","row","col","TILE_ORIGINS","generateEmptyGrid","gridSize","i","Array","fill","push","isValidMove","nextPos","tileValue","isInsideRow","length","isInsideCol","nextCell","emptyCell","sameValueCell","unmergedCell","mergeWithTile","newGrid","vector","gridChanged","j","tile","movedTile","newMerged","newRandom","hasAvailableMoves","flatGrid","flat","some","cell","generateTile","origin","id","uuid","generateRandomTile","randomValue","Math","random","getRandomEmptyCell","emptyCells","forEach","getEmptyCells","floor","addTile","map","hasVictoryTile","filter","calculateMoveScore","reduce","newTileSaga","newGameSaga","moveTilesSaga","mergeTilesSaga","checkEndGameSaga","updateBestScoreSaga","getBestScoreSaga","rootSaga","sleep","ms","Promise","res","setTimeout","task","select","gridUtils","updatedGrid","put","takeEvery","endGame","max","localStorage","setItem","getItem","parseInt","all","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","compose","applyMiddleware","run","Header","props","onNewGameClick","className","styles","container","titleContainer","title","subTitle","gameInfo","scoresContainer","scoreContainer","scoreLabel","scoreValue","buttonsContainer","newGameBtn","onClick","HeaderContainer","dispatch","useDispatch","useSelector","handleNewGameClick","useCallback","BoardGrid","cells","key","boardGridCell","boardGrid","Tiles","tilesContainer","positionStyles","transform","classes","classNames","newRandomTile","newMergedTile","tileContainer","style","Board","boardContainer","BoardContainer","flatten","sort","tile1","tile2","useEffect","window","addEventListener","handleKeyPress","removeEventListener","e","keyCode","GameOverPanel","endGamePanel","panelBtn","VictoryPanel","onKeepPlayingClick","EndGamePanel","content","EndGamePanelContainer","handleKeepPlayingClick","Game","showEndGamePanel","PLAYING","positionRelative","howToPlayText","boldText","viewOnGithubLink","href","target","GameContainer","onSwiped","dir","toUpperCase","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cf683c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"boardContainer\":\"Board_boardContainer__1LEFg\",\"boardGrid\":\"Board_boardGrid__30AAE\",\"boardGridCell\":\"Board_boardGridCell__2cENT\",\"tilesContainer\":\"Board_tilesContainer__3TIBn\",\"tileContainer\":\"Board_tileContainer__3YcLx\",\"tile\":\"Board_tile__36kz5\",\"newRandomTile\":\"Board_newRandomTile__3aOcI\",\"newRandomTileAnimation\":\"Board_newRandomTileAnimation__1eu4J\",\"newMergedTile\":\"Board_newMergedTile__2fYCj\",\"newMergedTileAnimation\":\"Board_newMergedTileAnimation__1FEAj\",\"tile-2\":\"Board_tile-2__1868c\",\"tile-4\":\"Board_tile-4__2ZMie\",\"tile-8\":\"Board_tile-8__TQ_WY\",\"tile-16\":\"Board_tile-16__h7mTZ\",\"tile-32\":\"Board_tile-32__3Ge3d\",\"tile-64\":\"Board_tile-64__1QBuo\",\"tile-128\":\"Board_tile-128__fVeou\",\"tile-256\":\"Board_tile-256__1HYOa\",\"tile-512\":\"Board_tile-512__1YoSF\",\"tile-1024\":\"Board_tile-1024__3qOp-\",\"tile-2048\":\"Board_tile-2048__3LhJo\",\"tile-4096\":\"Board_tile-4096__3irdB\",\"tile-8192\":\"Board_tile-8192__273NZ\",\"tile-16384\":\"Board_tile-16384__1GhCe\",\"tile-32768\":\"Board_tile-32768__39-EQ\",\"tile-65536\":\"Board_tile-65536__YuCUh\",\"tile-131072\":\"Board_tile-131072__3ScEQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"EndGamePanel_container__F2q-c\",\"endGamePanel\":\"EndGamePanel_endGamePanel__1vMAp\",\"fadeInAnimation\":\"EndGamePanel_fadeInAnimation__3GGIs\",\"panelBtn\":\"EndGamePanel_panelBtn__PTD2G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Game_container__39SqM\",\"howToPlayText\":\"Game_howToPlayText__6SN9W\",\"viewOnGithubLink\":\"Game_viewOnGithubLink__2drxN\",\"positionRelative\":\"Game_positionRelative__29WxI\",\"boldText\":\"Game_boldText__1PbJY\"};","export const NEW_GAME = 'NEW_GAME';\nexport const VICTORY = 'VICTORY';\nexport const GAME_OVER = 'GAME_OVER';\nexport const KEEP_PLAYING = 'KEEP_PLAYING';\nexport const CHECK_END_GAME = 'CHECK_END_GAME';\n\nexport const RESET_SCORE = 'RESET_SCORE';\nexport const INCREMENT_SCORE = 'INCREMENT_SCORE';\nexport const UPDATE_BEST_SCORE = 'UPDATE_BEST_SCORE';\nexport const GET_BEST_SCORE = 'GET_BEST_SCORE';\n\nexport const NEW_TILE = 'NEW_TILE';\nexport const MOVE_TILES = 'MOVE_TILES';\nexport const MERGE_TILES = 'MERGE_TILES';\nexport const UPDATE_GRID = 'UPDATE_GRID';\nexport const SET_TILES_MOVING = 'SET_TILES_MOVING';\n","// Tile needed to win the game\nexport const VICTORY_TILE = 2048;\n\n// Game states\nexport const GAME_STATES = {\n  IN_PROGRESS: 'IN_PROGRESS',\n  VICTORY: 'VICTORY',\n  GAME_OVER: 'GAME_OVER',\n  IN_PROGRESS_AFTER_VICTORY: 'IN_PROGRESS_AFTER_VICTORY',\n};\n\n// Board grid size\nexport const GRID_SIZE = 4;\n\n// Directions\nexport const DIRECTIONS = {\n  UP: 'UP',\n  LEFT: 'LEFT',\n  DOWN: 'DOWN',\n  RIGHT: 'RIGHT',\n};\n\n// Keyboard arrows codes\nexport const ARROWS = {\n  38: DIRECTIONS.UP,\n  37: DIRECTIONS.LEFT,\n  40: DIRECTIONS.DOWN,\n  39: DIRECTIONS.RIGHT,\n};\n","import * as actions from '../actions/action-types';\nimport { GAME_STATES } from '../../constants';\n\nconst initialState = {\n  gameState: GAME_STATES.IN_PROGRESS,\n};\n\nconst gameReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.NEW_GAME: {\n      return { ...state, gameState: GAME_STATES.IN_PROGRESS };\n    }\n    case actions.KEEP_PLAYING: {\n      return { ...state, gameState: GAME_STATES.IN_PROGRESS_AFTER_VICTORY };\n    }\n    case actions.GAME_OVER: {\n      return { ...state, gameState: GAME_STATES.GAME_OVER };\n    }\n    case actions.VICTORY: {\n      return { ...state, gameState: GAME_STATES.VICTORY };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default gameReducer;\n","import * as actions from '../actions/action-types';\n\nconst initialState = {\n  grid: [],\n  tilesMoving: false,\n};\n\nconst tilesReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.SET_TILES_MOVING: {\n      return { ...state, tilesMoving: action.payload };\n    }\n    case actions.UPDATE_GRID: {\n      return { ...state, grid: action.payload };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default tilesReducer;\n","import * as actions from '../actions/action-types';\n\nconst initialState = {\n  currentScore: 0,\n  bestScore: 0,\n};\n\nconst scoreReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.NEW_GAME: {\n      return { ...state, currentScore: 0 };\n    }\n    case actions.INCREMENT_SCORE: {\n      const newScore = state.currentScore + action.payload;\n      return { ...state, currentScore: newScore };\n    }\n    case actions.UPDATE_BEST_SCORE: {\n      return { ...state, bestScore: action.payload };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default scoreReducer;\n","import { combineReducers } from 'redux';\n\nimport gameReducer from './game';\nimport tilesReducer from './tiles';\nimport scoreReducer from './score';\n\nexport default combineReducers({\n  game: gameReducer,\n  tiles: tilesReducer,\n  score: scoreReducer,\n});\n","import * as actions from './action-types';\n\n/**\n * Creates a new tile with a random position\n */\nexport const newTile = () => ({\n  type: actions.NEW_TILE,\n});\n\n/**\n * Moves all tiles to a given direction\n *\n * @param {String} direction UP, DOWN, LEFT or RIGHT\n */\nexport const moveTiles = direction => ({\n  type: actions.MOVE_TILES,\n  payload: direction,\n});\n\n/**\n * Merges the tiles in the same cell\n */\nexport const mergeTiles = () => ({\n  type: actions.MERGE_TILES,\n});\n\n/**\n * Updates board grid\n *\n * @param {Array} grid\n */\nexport const updateGrid = grid => ({\n  type: actions.UPDATE_GRID,\n  payload: grid,\n});\n\n/**\n * Sets if tiles are moving or not\n *\n * @param {Boolean} value\n */\nexport const setTilesMoving = value => ({\n  type: actions.SET_TILES_MOVING,\n  payload: value,\n});\n","import * as actions from './action-types';\n\n/**\n * Starts a new game\n */\nexport const newGame = () => ({\n  type: actions.NEW_GAME,\n});\n\n/**\n * Ends the game when the player lose\n */\nexport const gameOver = () => ({\n  type: actions.GAME_OVER,\n});\n\n/**\n * Ends the game when the player win\n */\nexport const victory = () => ({\n  type: actions.VICTORY,\n});\n\n/**\n * Allows player to keep playing after victory\n */\nexport const keepPlaying = () => ({\n  type: actions.KEEP_PLAYING,\n});\n\n/**\n * Checks if the player won or lost\n */\nexport const checkEndGame = () => ({\n  type: actions.CHECK_END_GAME,\n});\n","import * as actions from './action-types';\n\n/**\n * Increments the current score\n *\n * @param {number} value value to be incremented\n */\nexport const incrementScore = value => ({\n  type: actions.INCREMENT_SCORE,\n  payload: value,\n});\n\n/**\n * Sets the current score to 0 (zero)\n */\nexport const resetScore = () => ({\n  type: actions.RESET_SCORE,\n});\n\n/**\n * Update best score\n *\n * @param {number} value\n */\nexport const updateBestScore = value => ({\n  type: actions.UPDATE_BEST_SCORE,\n  payload: value,\n});\n\n/**\n * Get best score\n */\nexport const getBestScore = () => ({\n  type: actions.GET_BEST_SCORE,\n});\n","import uuid from 'uuid/v4';\n\nimport { DIRECTIONS, VICTORY_TILE } from '../constants';\n\n// Movement vector direction\nconst VECTOR = {\n  UP: { row: -1, col: 0 },\n  DOWN: { row: 1, col: 0 },\n  LEFT: { row: 0, col: -1 },\n  RIGHT: { row: 0, col: 1 },\n};\n\n// Actions that can generate a new tile\nexport const TILE_ORIGINS = {\n  MERGE: 'MERGE',\n  MOVE: 'MOVE',\n};\n\n/**\n * Generates a grid with empty cells\n *\n * @param {number} gridSize\n * @returns {number[][]}\n */\nexport const generateEmptyGrid = gridSize => {\n  const grid = [];\n\n  for (let i = 0; i < gridSize; i += 1) {\n    const row = Array(gridSize).fill(null);\n    grid.push(row);\n  }\n\n  return grid;\n};\n\n/**\n * Checks if the tile can be moved to the specified position\n *\n * @param {{row: number, col: number}} nextPos Coords of new position\n * @param {number[][]} grid Grid with the moved tiles\n * @param {string} tileValue Value of the tile being moved\n * @returns {number[][]}\n */\nexport const isValidMove = (nextPos, grid, tileValue) => {\n  const isInsideRow = nextPos.row >= 0 && nextPos.row < grid.length;\n  const isInsideCol = nextPos.col >= 0 && nextPos.col < grid.length;\n  const isInsideGrid = isInsideRow && isInsideCol;\n\n  if (!isInsideGrid) {\n    return false;\n  }\n\n  const nextCell = grid[nextPos.row][nextPos.col];\n  const emptyCell = nextCell === null;\n  const sameValueCell = nextCell && nextCell.value === tileValue;\n  const unmergedCell = nextCell && !nextCell.mergeWithTile;\n\n  return emptyCell || (sameValueCell && unmergedCell);\n};\n\n/**\n * Returns a grid with moved tiles\n *\n * @param {number[][]} grid\n * @param {string} direction\n * @returns {{newGrid: number[][], gridChanged: boolean}}\n */\nexport const moveTiles = (grid, direction) => {\n  const gridSize = grid.length;\n  const newGrid = generateEmptyGrid(gridSize);\n  const vector = VECTOR[direction];\n  let gridChanged = false;\n\n  for (let i = 0; i < gridSize; i += 1) {\n    for (let j = 0; j < gridSize; j += 1) {\n      let row = i;\n      let col = j;\n\n      // Reverse row iterate tiles from bottom to top\n      if (direction === DIRECTIONS.DOWN) row = gridSize - i - 1;\n\n      // Reverse col iterate tiles from right to left\n      if (direction === DIRECTIONS.RIGHT) col = gridSize - j - 1;\n\n      const tile = grid[row][col];\n\n      if (tile !== null) {\n        const movedTile = { ...tile };\n        const nextPos = {\n          row: tile.row + vector.row,\n          col: tile.col + vector.col,\n        };\n\n        movedTile.newMerged = false;\n        movedTile.newRandom = false;\n\n        while (isValidMove(nextPos, newGrid, movedTile.value)) {\n          movedTile.row = nextPos.row;\n          movedTile.col = nextPos.col;\n\n          nextPos.row += vector.row;\n          nextPos.col += vector.col;\n\n          if (movedTile.row !== tile.row || movedTile.col !== tile.col) {\n            gridChanged = true;\n          }\n        }\n\n        if (newGrid[movedTile.row][movedTile.col] !== null) {\n          newGrid[movedTile.row][movedTile.col].mergeWithTile = movedTile;\n        } else {\n          newGrid[movedTile.row][movedTile.col] = movedTile;\n        }\n      }\n    }\n  }\n  return { newGrid, gridChanged };\n};\n\n/**\n * Checks if there are available moves in the grid\n *\n * @param {number[][]} grid\n * @returns {boolean}\n */\nexport const hasAvailableMoves = grid => {\n  const flatGrid = grid.flat();\n  const gridSize = grid.length;\n\n  // Checks if there are any empty cell\n  if (flatGrid.some(cell => cell === null)) {\n    return true;\n  }\n\n  // Checks if there are adjacent cells with the same value\n  for (const tile of flatGrid) {\n    const { row, col, value } = tile;\n\n    if (row + 1 < gridSize && grid[row + 1][col].value === value) {\n      return true;\n    }\n\n    if (col + 1 < gridSize && grid[row][col + 1].value === value) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * Creates a tile object\n *\n * @param {number} row\n * @param {number} col\n * @param {number} value\n * @param {string} origin\n * @returns {Object}\n */\nexport const generateTile = (row, col, value, origin) => {\n  const newMerged = origin === TILE_ORIGINS.MERGE;\n  const newRandom = origin === TILE_ORIGINS.MOVE;\n\n  return {\n    id: uuid(),\n    value,\n    row,\n    col,\n    newRandom,\n    newMerged,\n    mergeWithTile: null,\n  };\n};\n\n/**\n * Creates a tile object with random value and random position\n * The value may be 2 or 4 and the position randomly picked empty cell\n *\n * @param {number[][]} grid\n * @returns {Object}\n */\nexport const generateRandomTile = grid => {\n  const randomValue = Math.random() > 0.9 ? 4 : 2;\n  const { row, col } = getRandomEmptyCell(grid);\n  return generateTile(row, col, randomValue, TILE_ORIGINS.MOVE);\n};\n\n/**\n * Gets the coordinates of all empty cells in the grid\n *\n * @param {number[][]} grid\n * @returns {{row: number, col: number}[]}\n */\nexport const getEmptyCells = grid => {\n  const emptyCells = [];\n\n  grid.forEach((row, i) => {\n    row.forEach((cell, j) => {\n      if (!cell) {\n        emptyCells.push({ row: i, col: j });\n      }\n    });\n  });\n  return emptyCells;\n};\n\n/**\n * Gets the coordinates of a empty random cell in the grid\n *\n * @param {number[][]} grid\n * @returns {{row: number, col: number}}\n */\nexport const getRandomEmptyCell = grid => {\n  const emptyCells = getEmptyCells(grid);\n  return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n};\n\n/**\n * Returns a grid with the new tile added\n *\n * @param {number[][]} grid\n * @param {Object} tile\n * @returns {number[][]}\n */\nexport const addTile = (grid, tile) => {\n  const updatedGrid = grid.map((row, i) => {\n    if (i !== tile.row) {\n      return row;\n    } else {\n      return row.map((col, j) => {\n        if (j !== tile.col) {\n          return col;\n        } else {\n          return tile;\n        }\n      });\n    }\n  });\n\n  return updatedGrid;\n};\n\n/**\n * Returns a grid with the new merged tiles\n *\n * @param {number[][]} grid\n * @returns {number[][]}\n */\nexport const mergeTiles = grid => {\n  const updatedGrid = grid.map(row => {\n    return row.map(tile => {\n      if (tile && tile.mergeWithTile) {\n        const { row, col, value } = tile;\n        return generateTile(row, col, value * 2, TILE_ORIGINS.MERGE);\n      } else {\n        return tile;\n      }\n    });\n  });\n\n  return updatedGrid;\n};\n\n/**\n * Checks if the victory tile is present in the grid\n *\n * @param {number[][]} grid\n * @returns {boolean}\n */\nexport const hasVictoryTile = grid => {\n  return grid\n    .flat()\n    .filter(cell => cell !== null)\n    .some(cell => cell.value === VICTORY_TILE);\n};\n\n/**\n * Calculates the score of the last move\n *\n * @param {number[][]} grid\n * @returns {number}\n */\nexport const calculateMoveScore = grid => {\n  const tiles = grid.flat().filter(cell => cell !== null);\n  const reducer = (score, tile) => {\n    return tile.newMerged ? score + tile.value : score;\n  };\n  return tiles.reduce(reducer, 0);\n};\n","import { put, takeEvery, all, select } from 'redux-saga/effects';\n\nimport { newTile, mergeTiles, updateGrid, setTilesMoving } from './actions/tiles';\nimport { gameOver, victory, checkEndGame } from './actions/game';\nimport { incrementScore, updateBestScore } from './actions/score';\nimport * as actions from './actions/action-types';\nimport { GAME_STATES, GRID_SIZE } from '../constants';\nimport * as gridUtils from '../utils/grid';\n\nconst sleep = ms => new Promise(res => setTimeout(res, ms));\n\nfunction* newTileSaga() {\n  function* task() {\n    const grid = yield select(state => state.tiles.grid);\n    if (grid.length) {\n      const tile = gridUtils.generateRandomTile(grid);\n      const updatedGrid = gridUtils.addTile(grid, tile);\n      yield put(updateGrid(updatedGrid));\n    }\n  }\n  yield takeEvery(actions.NEW_TILE, task);\n}\n\nfunction* newGameSaga() {\n  function* task() {\n    const grid = gridUtils.generateEmptyGrid(GRID_SIZE);\n    yield put(updateGrid(grid));\n    yield put(newTile());\n    yield put(newTile());\n  }\n  yield takeEvery(actions.NEW_GAME, task);\n}\n\nfunction* moveTilesSaga() {\n  function* task(action) {\n    const { grid, tilesMoving } = yield select(state => state.tiles);\n    const gameState = yield select(state => state.game.gameState);\n    const { newGrid, gridChanged } = gridUtils.moveTiles(grid, action.payload);\n    const endGame = gameState === GAME_STATES.VICTORY || gameState === GAME_STATES.GAME_OVER;\n\n    if (tilesMoving || endGame) return;\n\n    if (gridChanged) {\n      yield put(setTilesMoving(true));\n      yield put(updateGrid(newGrid));\n\n      yield sleep(150);\n      yield put(setTilesMoving(false));\n      yield put(mergeTiles());\n\n      yield put(newTile());\n      yield put(checkEndGame());\n    }\n  }\n  yield takeEvery(actions.MOVE_TILES, task);\n}\n\nfunction* mergeTilesSaga() {\n  function* task() {\n    const grid = yield select(state => state.tiles.grid);\n    const updatedGrid = gridUtils.mergeTiles(grid);\n    const score = gridUtils.calculateMoveScore(updatedGrid);\n\n    yield put(updateGrid(updatedGrid));\n    yield put(incrementScore(score));\n  }\n  yield takeEvery(actions.MERGE_TILES, task);\n}\n\nfunction* checkEndGameSaga() {\n  function* task() {\n    const grid = yield select(state => state.tiles.grid);\n    const gameState = yield select(state => state.game.gameState);\n    const { currentScore, bestScore } = yield select(state => state.score);\n\n    if (gameState !== GAME_STATES.IN_PROGRESS_AFTER_VICTORY) {\n      if (gridUtils.hasVictoryTile(grid)) {\n        yield put(victory());\n        yield put(updateBestScore(Math.max(currentScore, bestScore)));\n      }\n    }\n\n    if (!gridUtils.hasAvailableMoves(grid)) {\n      yield put(gameOver());\n      yield put(updateBestScore(Math.max(currentScore, bestScore)));\n    }\n  }\n  yield takeEvery(actions.CHECK_END_GAME, task);\n}\n\nfunction* updateBestScoreSaga() {\n  function* task() {\n    const bestScore = yield select(state => state.score.bestScore);\n    localStorage.setItem('bestScore', bestScore);\n  }\n  yield takeEvery(actions.UPDATE_BEST_SCORE, task);\n}\n\nfunction* getBestScoreSaga() {\n  function* task() {\n    const bestScore = localStorage.getItem('bestScore');\n\n    if (bestScore) {\n      yield put(updateBestScore(parseInt(bestScore)));\n    }\n  }\n  yield takeEvery(actions.GET_BEST_SCORE, task);\n}\n\nexport default function* rootSaga() {\n  yield all([\n    newGameSaga(),\n    moveTilesSaga(),\n    mergeTilesSaga(),\n    newTileSaga(),\n    checkEndGameSaga(),\n    updateBestScoreSaga(),\n    getBestScoreSaga(),\n  ]);\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './reducers';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(sagaMiddleware)\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport styles from './Header.module.css';\n\nconst propTypes = {\n  score: PropTypes.number.isRequired,\n  bestScore: PropTypes.number.isRequired,\n  onNewGameClick: PropTypes.func.isRequired,\n};\n\nfunction Header(props) {\n  const { score, bestScore, onNewGameClick } = props;\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.titleContainer}>\n        <h1 className={styles.title}>2048</h1>\n        <h2 className={styles.subTitle}>Join the numbers and get to the 2048 tile!</h2>\n      </div>\n\n      <div className={styles.gameInfo}>\n        <div className={styles.scoresContainer}>\n          <div className={styles.scoreContainer}>\n            <div className={styles.scoreLabel}>Score</div>\n            <div className={styles.scoreValue}>{score}</div>\n          </div>\n\n          <div className={styles.scoreContainer}>\n            <div className={styles.scoreLabel}>Best</div>\n            <div className={styles.scoreValue}>{bestScore}</div>\n          </div>\n        </div>\n\n        <div className={styles.buttonsContainer}>\n          <button className={styles.newGameBtn} onClick={onNewGameClick}>\n            New Game\n          </button>\n          {/* <button className={styles.undoBtn} onClick={onNewGameClick}>\n            Undo\n          </button> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nHeader.propTypes = propTypes;\nexport default Header;\n","import React, { useCallback } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { newGame } from '../../redux/actions/game';\nimport Header from './Header';\n\nfunction HeaderContainer() {\n  const dispatch = useDispatch();\n  const { currentScore, bestScore } = useSelector(state => state.score);\n\n  const handleNewGameClick = useCallback(() => {\n    dispatch(newGame());\n  }, [dispatch]);\n\n  return <Header score={currentScore} bestScore={bestScore} onNewGameClick={handleNewGameClick} />;\n}\n\nexport default HeaderContainer;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { GRID_SIZE } from '../../constants';\nimport styles from './Board.module.css';\n\nconst propTypes = {\n  tiles: PropTypes.array.isRequired,\n};\n\nconst BoardGrid = () => {\n  const cells = [];\n\n  for (let i = 0; i < GRID_SIZE * GRID_SIZE; i += 1) {\n    cells.push(<div key={i} className={styles.boardGridCell}></div>);\n  }\n  return <div className={styles.boardGrid}>{cells}</div>;\n};\n\nconst Tiles = props => {\n  const tiles = props.tiles;\n\n  return (\n    <div className={styles.tilesContainer}>\n      {tiles.map(tile => {\n        const positionStyles = {\n          transform: `translate(${tile.col * (75 + 10)}px, ${tile.row * (75 + 10)}px)`,\n        };\n\n        let classes = classNames(styles.tile, {\n          [styles.newRandomTile]: tile.newRandom,\n          [styles.newMergedTile]: tile.newMerged,\n          [styles[`tile-${tile.value}`]]: true,\n        });\n\n        return (\n          <div key={tile.id} className={styles.tileContainer} style={positionStyles}>\n            <div className={classes}>{tile.value}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nfunction Board(props) {\n  const tiles = props.tiles;\n\n  return (\n    <div className={styles.boardContainer}>\n      <BoardGrid />\n      <Tiles tiles={tiles} />\n    </div>\n  );\n}\n\nBoard.propTypes = propTypes;\nexport default Board;\n","import React, { useEffect } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { flatten } from 'lodash';\n\nimport { moveTiles } from '../../redux/actions/tiles';\nimport { ARROWS } from '../../constants';\nimport Board from './Board';\n\nconst BoardContainer = () => {\n  const dispatch = useDispatch();\n  const tiles = useSelector(state => {\n    const tiles = [];\n    flatten(state.tiles.grid).forEach(tile => {\n      if (tile) {\n        tiles.push(tile);\n\n        if (tile.mergeWithTile) {\n          tiles.push(tile.mergeWithTile);\n        }\n      }\n    });\n\n    return tiles.sort((tile1, tile2) => (tile1.id > tile2.id ? 1 : -1));\n  });\n\n  // Add keypress event listener\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  });\n\n  const handleKeyPress = e => {\n    const direction = ARROWS[e.keyCode];\n\n    if (direction) {\n      dispatch(moveTiles(direction));\n    }\n  };\n\n  return <Board tiles={tiles} />;\n};\n\nexport default BoardContainer;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport { GAME_STATES } from '../../constants';\nimport styles from './EndGamePanel.module.css';\n\nconst propTypes = {\n  gameState: PropTypes.string.isRequired,\n  onNewGameClick: PropTypes.func.isRequired,\n  onKeepPlayingClick: PropTypes.func.isRequired,\n};\n\nconst GameOverPanel = props => {\n  return (\n    <div className={styles.endGamePanel}>\n      <h1>GAME OVER!</h1>\n      <button className={styles.panelBtn} onClick={props.onNewGameClick}>\n        Try Again\n      </button>\n    </div>\n  );\n};\n\nconst VictoryPanel = props => {\n  return (\n    <div className={styles.endGamePanel}>\n      <h1>YOU WIN!</h1>\n      <div>\n        <button className={styles.panelBtn} onClick={props.onKeepPlayingClick}>\n          Keep Playing\n        </button>\n        <button className={styles.panelBtn} onClick={props.onNewGameClick}>\n          Try Again\n        </button>\n      </div>\n    </div>\n  );\n};\n\nfunction EndGamePanel(props) {\n  const { onNewGameClick, onKeepPlayingClick } = props;\n  let content = null;\n\n  if (props.gameState === GAME_STATES.GAME_OVER) {\n    content = <GameOverPanel onNewGameClick={onNewGameClick} />;\n  } else if (props.gameState === GAME_STATES.VICTORY) {\n    content = <VictoryPanel onNewGameClick={onNewGameClick} onKeepPlayingClick={onKeepPlayingClick} />;\n  }\n\n  return <div className={styles.container}>{content}</div>;\n}\n\nEndGamePanel.propTypes = propTypes;\nexport default EndGamePanel;\n","import React, { useCallback } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { newGame, keepPlaying } from '../../redux/actions/game';\nimport EndGamePanel from './EndGamePanel';\n\nfunction EndGamePanelContainer() {\n  const dispatch = useDispatch();\n  const gameState = useSelector(state => state.game.gameState);\n\n  const handleNewGameClick = useCallback(() => {\n    dispatch(newGame());\n  }, [dispatch]);\n\n  const handleKeepPlayingClick = useCallback(() => {\n    dispatch(keepPlaying());\n  }, [dispatch]);\n\n  return (\n    <EndGamePanel\n      gameState={gameState}\n      onNewGameClick={handleNewGameClick}\n      onKeepPlayingClick={handleKeepPlayingClick}\n    />\n  );\n}\n\nexport default EndGamePanelContainer;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Header from '../../components/header';\nimport Board from '../../components/board';\nimport EndGamePanel from '../../components/end-game-panel';\nimport { GAME_STATES } from '../../constants';\nimport styles from './Game.module.css';\n\nconst propTypes = {\n  gameState: PropTypes.string.isRequired,\n};\n\nfunction Game(props) {\n  const showEndGamePanel = props.gameState !== GAME_STATES.PLAYING;\n\n  return (\n    <div className={styles.container}>\n      <Header />\n\n      <div className={styles.positionRelative}>\n        <Board />\n        {showEndGamePanel && <EndGamePanel />}\n      </div>\n\n      <p className={styles.howToPlayText}>\n        <span className={styles.boldText}>HOW TO PLAY</span>: Use your arrow keys or swipe to move the tiles. When two\n        tiles with the same number touch, they merge into one!\n      </p>\n\n      <div className={styles.viewOnGithubLink}>\n        <a href=\"https://github.com/rbika/2048\" target=\"_blank\">\n          View on Github\n        </a>\n      </div>\n    </div>\n  );\n}\n\nGame.propTypes = propTypes;\nexport default Game;\n","import React, { useEffect } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Swipeable } from 'react-swipeable';\n\nimport { newGame } from '../../redux/actions/game';\nimport { moveTiles } from '../../redux/actions/tiles';\nimport { DIRECTIONS } from '../../constants';\nimport Game from './Game';\nimport { getBestScore } from '../../redux/actions/score';\n\nfunction GameContainer() {\n  const gameState = useSelector(state => state.game.gameState);\n  const dispatch = useDispatch();\n\n  // Starts a new game\n  useEffect(() => {\n    dispatch(newGame());\n  }, []);\n\n  // Get best score from local storage\n  useEffect(() => {\n    dispatch(getBestScore());\n  }, []);\n\n  const handleSwipe = e => {\n    const direction = DIRECTIONS[e.dir.toUpperCase()];\n\n    if (direction) {\n      dispatch(moveTiles(direction));\n    }\n  };\n\n  return (\n    <Swipeable onSwiped={handleSwipe}>\n      <Game gameState={gameState} />\n    </Swipeable>\n  );\n}\n\nexport default GameContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport Game from './pages/game';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <Game />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__27QFJ\",\"titleContainer\":\"Header_titleContainer__53BfW\",\"title\":\"Header_title__3_fub\",\"subTitle\":\"Header_subTitle__10-eU\",\"gameInfo\":\"Header_gameInfo__3aUvJ\",\"scoresContainer\":\"Header_scoresContainer__N5WX-\",\"scoreContainer\":\"Header_scoreContainer__3bq5H\",\"scoreLabel\":\"Header_scoreLabel__3uraT\",\"scoreValue\":\"Header_scoreValue__2HLNR\",\"undoBtn\":\"Header_undoBtn__25oAM\",\"newGameBtn\":\"Header_newGameBtn__1c5MY\"};"],"sourceRoot":""}